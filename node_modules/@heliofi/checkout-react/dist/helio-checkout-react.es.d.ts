import { BlockchainSymbol } from '@heliofi/common';
export interface CustomTextsInterface {
    mainButtonTitle?: string;
    payButtonTitle?: string;
}
export type DisplayType = 'button' | 'inline' | 'new-tab';
export type EmbedPaymentType = 'paylink' | 'paystream';
export type EmbedThemeMode = 'light' | 'dark';

export declare const HelioCheckout: (props: HelioCheckoutReactProps) => JSX.Element;
export interface HelioCheckoutReactProps {
    config: HelioEmbedConfig;
}
export interface HelioEmbedConfig {
    /** either provide a paylinkId or a chargeToken - but not both */
    paylinkId?: string;
    chargeToken?: string;
    network?: NetworkType;
    debug?: boolean;
    customTexts?: CustomTextsInterface;
    primaryPaymentMethod?: PrimaryPaymentMethod;
    theme?: HelioEmbedTheme;
    stretchFullWidth?: boolean;
    paymentType?: EmbedPaymentType;
    platform?: WidgetPlatform;
    display?: DisplayType;
    amount?: string;
    additionalJSON?: Json;
    primaryColor?: string;
    neutralColor?: string;
    showPayWithCard?: boolean;
    onSuccess?: (event: {
        data: unknown;
        transaction: string;
        paymentPK?: string;
        swapTransactionSignature?: string;
        blockchainSymbol?: BlockchainSymbol;
        redirectUrl?: string;
    }) => void;
    onError?: (event: {
        transaction?: string;
        errorMessage?: string;
    }) => void;
    onPending?: (event: {
        data?: unknown;
        transaction: string;
        redirectUrl?: string;
        blockchainSymbol?: BlockchainSymbol;
    }) => void;
    onCancel?: (error?: {
        errorMessage?: string;
    }) => void;
    onStartPayment?: () => void;
}
export interface HelioEmbedTheme {
    themeMode: EmbedThemeMode;
    colors?: {
        primaryButtonBackground?: string;
        /** @deprecated - for internal use only */
        primaryButtonBackgroundHover?: string;
        primaryButtonText?: string;
        backgroundLoadingModal?: string;
        backgroundPrimary?: string;
        textPriceBanner?: string;
        backgroundContainer?: string;
        backgroundSecondary?: string;
        primaryButtonShadow?: string;
        /** @deprecated - for internal use only */
        shadowPrimaryGray?: string;
        shadowWalletButton?: string;
        textLabel?: string;
        iconFillColor?: string;
    };
}
export type Json = Json[] | boolean | null | number | string | {
    [key: string]: Json;
};
export type NetworkType = 'test' | 'main';
export type PrimaryPaymentMethod = 'fiat' | 'crypto';
export type WidgetPlatform = 'magic_eden' | 'helio';

export { }
